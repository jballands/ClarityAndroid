package com.clarityforandroid.helpers;

import java.util.ArrayList;

import org.javatuples.Triplet;

import com.clarityforandroid.R;
import com.clarityforandroid.controllers.WelcomeActivity;
import com.clarityforandroid.helpers.ClarityApiCall.ClarityApiMethod;

import android.app.ProgressDialog;
import android.content.Context;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.os.AsyncTask;
import android.util.Log;

/**
 * This class abstracts error-checking/handling and loading visuals
 * from the activities to make server accesses easier on the
 * programmer. Use this class in conjunction with ClarityApiCall,
 * to make calls to the server.
 * 
 * @author Jonathan Ballands
 * @version 1.0
 */
public class ClarityServerTask {

	// Properties
	private Context context;
	private String loadMessage;
	private ClarityApiCall call;
	private ClarityApiMethod method;
	private ArrayList<Triplet<Integer, String, String>> errors;
	private ClarityServerTaskDelegate delegate = null;
	
	/**
	 * Constructs a new server task.
	 * 
	 * @param cpc The API call you wish to make.
	 * @param meth The method you would like to use to make the API call.
	 * @param msg The message you want the loader to display.
	 * @param errs API error responses with the title and the message you want to display.
	 * @param cntxt The context for this task.
	 * @param del The task delegate that will process the results of this task.
	 */
	public ClarityServerTask(ClarityApiCall cpc, ClarityApiMethod meth, String msg, ArrayList<Triplet<Integer, String, String>> errs,
			Context cntxt, ClarityServerTaskDelegate del) {
		call = cpc;
		method = meth;
		loadMessage = msg;
		errors = errs;
		context = cntxt;
		delegate = del;
	}
	
	/**
	 * Starts the server task.
	 */
	public void go() {
		
		// Already executed?
		if (call.getResponseCode() != -1) {
			Log.e("ClarityServerTask", "The ClarityApiCall has already been executed");
			return;
		}
		
		// Delegate?
		else if (delegate == null) {
			Log.e("ClarityServerTask", "No delegate assigned. Please assign one");
			return;
		}
		
		// Find the Internet
		ConnectivityManager connectivityManager = (ConnectivityManager) context.getSystemService(
				WelcomeActivity.CONNECTIVITY_SERVICE);
		NetworkInfo activeNetworkInfo = connectivityManager.getActiveNetworkInfo();
		
		// Is there a connection?
		if (activeNetworkInfo == null || !activeNetworkInfo.isConnected()) {
			ClarityDialogFactory.displayNewErrorDialog(context, "No Internet Access", context.getString(
					com.clarityforandroid.R.string.no_internet));
			return;
		}
		
		// Ready to execute
		else {
			new AsyncLoader().execute();
		}
	}
	
	/**
	 * The asynchronous loader that communicates with the Clarity server.
	 * 
	 * @author Jonathan Ballands
	 * @version 1.0
	 */
	private class AsyncLoader extends AsyncTask<Void, Void, ClarityApiCall> {
		
		ProgressDialog loadingDialog;
		
		@Override
		protected void onPreExecute() {
			loadingDialog = ClarityDialogFactory.displayNewProgressDialog(context, loadMessage);
		}
		
		@Override
		protected ClarityApiCall doInBackground(Void... voids) {
			if (call.execute(method)) {
				return call;
			}
			else {
				return null;
			}
		}
		
		@Override
		protected void onPostExecute(ClarityApiCall param) {
			
			// Did something go horribly wrong?
			if (param == null) {
				ClarityDialogFactory.displayNewErrorDialog(context, context.getString(R.string.error_title), context.getString(
						com.clarityforandroid.R.string.generic_error));
				return;
			}
			
			// Check for errors
			for (Triplet<Integer, String, String> pair : errors) {
				if (param.getResponseCode() == Integer.parseInt(pair[0])) {
					loadingDialog.dismiss();
					ClarityDialogFactory.displayNewErrorDialog(context, pair[1], pair[2]);
					return;
				}
			}
			
			// No errors
			loadingDialog.dismiss();
			delegate.processResults(call);
		}	
	}
}
