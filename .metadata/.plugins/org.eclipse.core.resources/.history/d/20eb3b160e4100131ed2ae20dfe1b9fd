package com.clarityforandroid.helpers;

import java.io.ByteArrayOutputStream;
import java.util.ArrayList;

import org.apache.http.NameValuePair;
import org.apache.http.message.BasicNameValuePair;

import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.util.Base64;

/**
 * Represents a single call to the Clarity API.
 * 
 * @author Jonathan Ballands
 * @version 1.0
 */
public class ClarityApiCall {

	/**
	 * A simple enumerated type that declares request methods.
	 * 
	 * @author Jonathan Ballands
	 * @version 1.0
	 */
	public enum ClarityApiMethod {
		GET,
		POST
	}
	
	// Properites.
	private String url;
	private ArrayList<NameValuePair> paramaters;
	private ArrayList<NameValuePair> headers;
	private int responseCode;
	private String response;
	private String message;
	
	/**
	 * Constructs a new API call.
	 * 
	 * @param u The URL for the part of the API you want to call.
	 */
	public ClarityApiCall(String u) {
		this.url = u;
		this.paramaters = new ArrayList<NameValuePair>();
		this.headers = new ArrayList<NameValuePair>();
	}
	
	/**
	 * Adds a parameter to the request.
	 * 
	 * @param name The name of the NameValue pair parameter.
	 * @param value The value of the NameValue pair parameter.
	 */
	public void addParameter(String name, String value) {
		this.paramaters.add(new BasicNameValuePair(name, value));
	}
	
	/**
	 * Adds a header to the request.
	 * 
	 * @param name The name of the NameValue pair parameter.
	 * @param value The value of the NameValue pair parameter.
	 */
	public void addHeader(String name, String value) {
		this.headers.add(new BasicNameValuePair(name, value));
	}
	
	/**
	 * Executes this API call to the Clarity server.
	 * 
	 * @param method The request method to use.
	 * @return True if the request sent properly, false if something went wrong.
	 */
	public boolean execute(ClarityApiMethod method) {
		if (method == ClarityApiMethod.GET) {
			// Set up the parameters
			String allParams = "";
			
			// If there are parameters...
			if (!this.paramaters.isEmpty()) {
				allParams.concat("?");
				
				// For all the parameters...
				for(NameValuePair pair : this.paramaters) {
					allParams.concat(pair.getName() + "=" + pair.getValue());
				}
			}
			return true;
		}
		else if (method == ClarityApiMethod.POST) {
			// TODO: Do something...
			return true;
		}
		else {
			return false;
		}
	}
	
	/**
	 * Serializes a bitmap image into a base 64 hash string.
	 * 
	 * @param b The bitmap image to serialize.
	 * @return A string that is a base 64 hash string of the bitmap.
	 */
	public String encodeBitmapToBase64(Bitmap b) {
		// Output stream
		ByteArrayOutputStream stream = new ByteArrayOutputStream();
		
		// Compress and stream
        b.compress(Bitmap.CompressFormat.JPEG, 100, stream);
        byte[] byteArray = stream.toByteArray();
        
        // Encode to base 64 and return
        return Base64.encodeToString(byteArray, Base64.DEFAULT);
	}
	
	/**
	 * Deserializes a base 64 hash string back into a bitmap image.
	 * 
	 * @param s The base 64 hash string to deserialize.
	 * @return A bitmap image.
	 */
	public Bitmap decodeBase64ToBitmap(String s) {	
		// Decode from base 64
		byte[] byteArray = Base64.decode(s, 0);
		
		// Form a bitmap and return
		return BitmapFactory.decodeByteArray(byteArray, 0, byteArray.length);
	}
}