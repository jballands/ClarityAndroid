package com.clarityforandroid.controllers;

import java.util.ArrayList;

import org.javatuples.Triplet;

import com.clarityforandroid.R;
import com.clarityforandroid.helpers.ClarityApiCall;
import com.clarityforandroid.helpers.ClarityServerTask;
import com.clarityforandroid.helpers.ClarityApiCall.ClarityApiMethod;
import com.clarityforandroid.helpers.ClarityServerTaskDelegate;
import com.clarityforandroid.models.PatientModel;
import com.clarityforandroid.models.ProviderModel;
import com.clarityforandroid.views.CurrentUserView;

import android.app.Activity;
import android.content.Intent;
import android.graphics.BitmapFactory;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.view.Window;
import android.view.View.OnClickListener;
import android.widget.ImageView;
import android.widget.TextView;

/**
 * The activity where you take a picture of the client.
 * 
 * @author Jonathan Ballands
 * @version 1.0
 */
public class CAPOverviewActivity extends Activity implements ClarityServerTaskDelegate {

	ProviderModel provider;
	PatientModel patient;

	CurrentUserView bar;
	
	ImageView patientPicture;
	TextView patientName;
	TextView patientLocation;
	TextView patientMisc;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);

		// Get bundles
		provider = new ProviderModel();
		patient = new PatientModel();
		Intent incomingIntent = this.getIntent();
		if (incomingIntent != null) {
			patient = incomingIntent.getExtras().getParcelable("patient_model");
			provider = incomingIntent.getExtras().getParcelable("provider_model");
		}

		// Set up views
		this.requestWindowFeature(Window.FEATURE_NO_TITLE);
		this.setContentView(R.layout.activity_cap_overview);
		bar = (CurrentUserView)(findViewById(R.id.currentUserView));
		patientPicture = (ImageView)(findViewById(R.id.patientPicture));
		patientName = (TextView)(findViewById(R.id.patientName));
		patientLocation = (TextView)(findViewById(R.id.patientLocation));
		patientMisc = (TextView)(findViewById(R.id.patientMisc));
		
		bar.initializeWithModel(provider);
		
		if (patient.picture() != null) {
			patientPicture.setImageBitmap(patient.picture());
		}
		else {
			patientPicture.setImageBitmap(BitmapFactory.decodeResource(this.getResources(), R.drawable.no_patient_image));
		}
		
		if (patient.nameMiddle() != null) {
			patientName.setText(patient.nameFirst() + " " + patient.nameMiddle() + " " + patient.nameLast());
		}
		else {
			patientName.setText(patient.nameFirst() + " " + patient.nameLast());
		}
		
		if (patient.location() != null) {
			patientLocation.setText(patient.location());
		}
		else {
			patientLocation.setText(getString(R.string.no_location));
		}
		
		patientMisc.setText(patient.sex() + ", " + patient.dateOfBirth());
		
		// Set listeners
		findViewById(R.id.send_button).setOnClickListener(
				new CreateOnClickListener());
	}
	
	/**
	 * The listener that listens for the scan button.
	 * 
	 * @author Jonathan Ballands
	 * @version 1.0
	 */
	private class CreateOnClickListener implements OnClickListener {

		@Override
		public void onClick(View v) {
			// Connect to the server
			ClarityApiCall call = new ClarityApiCall(
					"https://clarity-db.appspot.com/api/client_create");
			call.addParameter("name_prefix", patient.namePrefix());
			call.addParameter("name_first", patient.nameFirst());
			call.addParameter("name_middle", patient.nameMiddle());
			call.addParameter("name_last", patient.nameLast());
			call.addParameter("name_suffix", patient.nameSuffix());
			call.addParameter("sex", patient.sex());
			call.addParameter("location", patient.location());
			call.addParameter("dateofbirth", patient.dateOfBirth());
		
			// TODO: Make a byte array and attach their headshot to it
			// call.addParameter("headshot", null);
			
			// Set up errors
			ArrayList<Triplet<Integer, String, String>> errs = new ArrayList<Triplet<Integer, String, String>>();
			errs.add(new Triplet<Integer, String, String>(401, "Unexpected Error", getString(R.string.generic_error)));

			// New task
			ClarityServerTask task = new ClarityServerTask(call,
					ClarityApiMethod.POST,
					getString(R.string.create_patient_wait), errs,
					CAPOverviewActivity.this, CAPOverviewActivity.this);
			task.go();
		}
	}

	@Override
	public void processResults(ClarityApiCall call) {
		finish();
	}

	@Override
	public void processError(ClarityApiCall call) {
		Log.e("CAPOverviewActivity", "Failed to send off the API call");
	}
}
